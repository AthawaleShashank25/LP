#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

void parallel_reduction_min_max_sum_avg(
    const vector<int>& data,
    int& min_val,
    int& max_val,
    int& sum_val,
    double& avg_val
) {
    int local_min = data[0];
    int local_max = data[0];
    int local_sum = 0;

    #pragma omp parallel for reduction(min:local_min) reduction(max:local_max) reduction(+:local_sum)
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] < local_min)
            local_min = data[i];
        if (data[i] > local_max)
            local_max = data[i];
        local_sum += data[i];
    }

    min_val = local_min;
    max_val = local_max;
    sum_val = local_sum;
    avg_val = static_cast<double>(local_sum) / data.size();
}

int main() {
    int data_size;
    cout << "Enter number of elements: ";
    cin >> data_size;

    if (data_size <= 0) {
        cerr << "Invalid size.\n";
        return 1;
    }

    vector<int> data(data_size);
    cout << "Enter " << data_size << " elements:\n";
    for (int i = 0; i < data_size; ++i) {
        cin >> data[i];
    }

    int min_val, max_val, sum_val;
    double avg_val;

    parallel_reduction_min_max_sum_avg(data, min_val, max_val, sum_val, avg_val);

    cout << "\nMinimum value: " << min_val << "\n";
    cout << "Maximum value: " << max_val << "\n";
    cout << "Sum value: " << sum_val << "\n";
    cout << "Average value: " << avg_val << "\n";

    return 0;
}
